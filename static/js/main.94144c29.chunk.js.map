{"version":3,"sources":["serviceWorker.js","index.js","App.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","Button","props","react__WEBPACK_IMPORTED_MODULE_6___default","className","id","onClick","e","el","target","prevBackground","style","backgroundColor","value","innerHTML","test","setTimeout","_this","Object","C_Users_memlol_myRepository_JS_calculator_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","C_Users_memlol_myRepository_JS_calculator_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","C_Users_memlol_myRepository_JS_calculator_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","display","formula","isOperatorClicked","handleClick","bind","C_Users_memlol_myRepository_JS_calculator_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_5__","input","setState","prevState","concat","slice","length","expression","replace","Math","round","eval","toString","_this2","btns","map","btn","React","Component"],"mappings":"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","file":"static/js/main.94144c29.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { Component } from 'react'\nimport './App.scss'\n\nconst Button = (props) => {\n  const handleClick = (e) => {\n     \n    const el = document.getElementById(e.target.id)\n    const prevBackground = el.style.backgroundColor;\n    const value = e.target.innerHTML;\n    \n    if (/\\d|\\./.test(value))\n      el.style.backgroundColor = '#726e6e'\n    else if (/x|\\-|\\+|\\/|\\=/.test(value))\n      el.style.backgroundColor = '#0d4887'\n    else\n      el.style.backgroundColor = '#8e1515'\n    \n    setTimeout(() => (\n      el.style.backgroundColor = prevBackground\n    ), 100)\n    \n    props.onClick(e)\n  }\n  return(\n    <div className='btn' id={props.id} onClick={handleClick}>{props.value}</div>\n  ) \n}\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      display: '0',\n      formula: '',\n      isOperatorClicked: false\n    }\n    this.handleClick = this.handleClick.bind(this)\n  }\n  handleClick(e) {\n    const input = e.target.innerHTML;\n    \n    switch(input) {\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n      case '6':\n      case '7':\n      case '8':\n      case '9':\n      case '0':\n        if (this.state.display === '0' || this.state.isOperatorClicked) {\n          this.setState({\n            display: input,\n            isOperatorClicked: false\n          })\n        } else\n          this.setState(prevState => ({\n            display: prevState.display + input\n          }))\n        break\n      case '.':\n        this.setState(prevState => ({\n          display: /\\./.test(prevState.display) ? \n                      prevState.display :\n                      prevState.display === '0' ? \n                        '0.' : \n                        prevState.display + input\n        })) \n        break\n      case '+':\n      case '-':\n      case '/':\n      case 'x':\n          this.setState(prevState => ({\n            formula: prevState.isOperatorClicked ? \n                        `${prevState.formula.slice(0, prevState.formula.length - 1)} ${input}` :\n                        `${prevState.formula} ${prevState.display} ${input}`,\n            isOperatorClicked: true\n          }))\n        break\n      case 'C':\n        this.setState({\n          display: '0',\n          formula: ''\n        });\n        break\n      case 'DEL':\n        if (!this.state.isOperatorClicked)\n          this.setState(prevState => ({\n          display: prevState.display.length > 1 ? \n                      prevState.display.slice(0, prevState.display.length - 1) :\n                      '0'\n          }))\n        break\n      case '=':\n        let expression = this.state.formula.replace(/x/g, '*') + this.state.display;\n        expression = Math.round(1000000000 * eval(expression)) / 1000000000;\n        this.setState({\n          display: expression.toString(),\n          formula: ''\n        })\n        break\n    }\n  }\n  render() {\n    return(\n      <div className='container'>\n        <div id='formula'>{this.state.formula}</div>\n        <div id='display'>{this.state.display}</div>\n        <div className='grid'>\n          {btns.map(btn => <Button value={btn.value} id={btn.id} onClick={this.handleClick}/>)}\n        </div>\n      </div>\n    )\n  }\n}\n\nconst btns = [\n  {\n    value: 'C',\n    id: 'clear'\n  },\n  {\n    value: 'DEL',\n    id: 'delete'\n  },\n  {\n    value: '/',\n    id: 'divide'\n  },\n  {\n    value: '7',\n    id: 'seven'\n  },\n  {\n    value: '8',\n    id: 'eight'\n  },\n  {\n    value: '9',\n    id: 'nine'\n  },\n  {\n    value: 'x',\n    id: 'multiply'\n  },\n  {\n    value: '4',\n    id: 'four'\n  },\n  {\n    value: '5',\n    id: 'five'\n  },\n  {\n    value: '6',\n    id: 'six'\n  },\n  {\n    value: '-',\n    id: 'subtract'\n  },\n  {\n    value: '1',\n    id: 'one'\n  },\n  {\n    value: '2',\n    id: 'two'\n  },\n  {\n    value: '3',\n    id: 'three'\n  },\n  {\n    value: '+',\n    id: 'add'\n  },\n  {\n    value: '0',\n    id: 'zero'\n  },\n  {\n    value: '.',\n    id: 'decimal'\n  },\n  {\n    value: '=',\n    id: 'equals'\n  }\n]\n\nexport default App;\n"],"sourceRoot":""}